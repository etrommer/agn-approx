:py:mod:`agnapprox.utils.error_stats`
=====================================

.. py:module:: agnapprox.utils.error_stats

.. autoapi-nested-parse::

   Implementations for several probabilistic error models



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   agnapprox.utils.error_stats.single_dist_mc
   agnapprox.utils.error_stats.error_prediction
   agnapprox.utils.error_stats.get_sample_population
   agnapprox.utils.error_stats.population_prediction
   agnapprox.utils.error_stats.to_distribution
   agnapprox.utils.error_stats.error_calculation



.. py:function:: single_dist_mc(emap: numpy.ndarray, x_dist: numpy.ndarray, w_dist: numpy.ndarray, fan_in: float, num_samples: int = int(100000.0)) -> Tuple[float, float]

   Generate error mean and standard deviation using Monte Carlo
   approach as described in: https://arxiv.org/abs/1912.00700

   :param emap: The multiplier's error map
   :param x_dist: Operand distribution of activations
   :param w_dist: Operand distribution of weights
   :param fan_in: Incoming connections for layer
   :param num_samples: Number of Monte Carlo simulation runs. Defaults to int(1e5).

   :returns: Mean and standard deviation for a single operation


.. py:function:: error_prediction(emap: numpy.ndarray, x_dist: numpy.ndarray, w_dist: numpy.ndarray, fan_in: float) -> Tuple[float, float]

   Generate error mean and standard deviation using the
   global distribution of activations and weights

   :param emap: The multiplier's error map
   :param x_dist: Operand distribution of activations
   :param w_dist: Operand distribution of weights
   :param fan_in: Incoming connections for layer

   :returns: Mean and standard deviation for a single operation


.. py:function:: get_sample_population(tensor: numpy.ndarray, num_samples: int = 512) -> numpy.ndarray

   Randomly select samples from a tensor that cover the receptive field of one neuron

   :param tensor: Tensor to draw samples from
   :param num_samples: Number of samples to draw. Defaults to 512.

   :returns: Sampled 2D Tensor of shape [num_samples, tensor.shape[-1]]


.. py:function:: population_prediction(emap: numpy.ndarray, x_multidist: numpy.ndarray, w_dist: numpy.ndarray, fan_in: float) -> Tuple[float, float]

   Generate prediction of mean and standard deviation using several
   sampled local distributions

   :param emap: The multiplier's error map
   :param x_multidist: Array of several operand distributions for activations
   :param w_dist: Operand distribution of weights
   :param fan_in: Incoming connections for layer

   :returns: Mean and standard deviation for a single operation


.. py:function:: to_distribution(tensor: Optional[numpy.ndarray], min_val: int, max_val: int) -> Tuple[numpy.ndarray, numpy.ndarray]

   Turn tensor of weights/activations into a frequency distribution (i.e. build a histogram)

   :param tensor: Tensor to build histogram from
   :param min_val: Lowest possible operand value in tensor
   :param max_val: Highest possible operand value in tensor

   :returns: Tuple of Arrays where first array contains the full numerical range between
             min_val and max_val inclusively and second array contains the relative frequency
             of each operand

   :raises ValueError: If run before features maps have been populated
   :raises by call to `utils.model.get_feature_maps`:


.. py:function:: error_calculation(accurate: numpy.ndarray, approximate: numpy.ndarray, fan_in: float) -> Tuple[float, float]

   Calculate mean and standard deviation of the observed error between
   accurate computation and approximate computation

   :param accurate: Accurate computation results
   :param approximate: Approximate computation results
   :param fan_in: Number of incoming neuron connections

   :returns: Mean and standard deviation for a single operation


