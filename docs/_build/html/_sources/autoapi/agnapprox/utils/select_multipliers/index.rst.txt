:py:mod:`agnapprox.utils.select_multipliers`
============================================

.. py:module:: agnapprox.utils.select_multipliers

.. autoapi-nested-parse::

   Utility functions to select approximate multipliers based on reference data



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   agnapprox.utils.select_multipliers.LayerInfo
   agnapprox.utils.select_multipliers.MatchingInfo



Functions
~~~~~~~~~

.. autoapisummary::

   agnapprox.utils.select_multipliers.select_layer_multiplier
   agnapprox.utils.select_multipliers.deploy_multipliers
   agnapprox.utils.select_multipliers.select_multipliers



Attributes
~~~~~~~~~~

.. autoapisummary::

   agnapprox.utils.select_multipliers.logger


.. py:data:: logger
   

   

.. py:function:: select_layer_multiplier(intermediate_results: agnapprox.utils.model.IntermediateLayerResults, multipliers: List[evoapproxlib.ApproximateMultiplier], max_noise: float, num_samples: int = 512) -> Tuple[str, float]

   Select a matching approximate multiplier for a single layer

   :param layer_ref_data: Reference input/output data generated from
                          a model run with *accurate* multiplication. This is used to calibrate
                          the layer standard deviation for the error estimate and determine the
                          distribution of numerical values in weights and activations.
   :param multipliers: Approximate Multiplier Error Maps, Performance Metrics and name
   :param max_noise: Learned allowable noise parameter (sigma_l)
   :param num_samples: Number of samples to draw from features for multi-population prediction.
                       Defaults to 512.

   :returns: Dictionary with name and performance metric of selected multiplier


.. py:class:: LayerInfo

   Multiplier Matching result for a single layer

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: multiplier_name
      :annotation: :str

      

   .. py:attribute:: multiplier_performance_metric
      :annotation: :float

      

   .. py:attribute:: opcount
      :annotation: :float

      

   .. py:method:: relative_opcount(total_opcount: float)

      Calculate the relative contribution of this layer to the network's total operations

      :param total_opcount: Number of operations in the entire networks

      :returns:

                - 0: layer contributes no operations to the network's opcount
                - 1: layer conttibutes all operations to the network's opcount
      :rtype: float between 0..1 where


   .. py:method:: relative_energy_consumption(metric_max: float)

      Relative energy consumption of selected approximate multiplier

      :param metric_max: Highest possible value for performance metric
                         (typically that of the respective accurate multiplier)

      :returns:

                - 0: selected multiplier consumes no energy
                - 1: selected multiplier consumes the maximum amount of energy
      :rtype: float between 0..1 where



.. py:class:: MatchingInfo

   Multiplier Matching result for the entire model

   .. py:attribute:: layers
      :annotation: :List[LayerInfo]

      

   .. py:attribute:: metric_max
      :annotation: :float

      

   .. py:attribute:: opcount
      :annotation: :float

      

   .. py:method:: relative_energy_consumption()
      :property:

      Relative Energy Consumption compared to network without approximation
      achieved by the current AM configuration

      :returns: sum relative energy consumption for each layer,
                weighted with the layer's contribution to overall operations



.. py:function:: deploy_multipliers(model: agnapprox.nets.ApproxNet, matching_result: MatchingInfo, library)

   Deploy selected approximate multipliers to network

   :param model: Model to deploy multipliers to
   :param matching_result: Results of multiplier matching
   :param library: Library to load Lookup tables from


.. py:function:: select_multipliers(model: agnapprox.nets.ApproxNet, datamodule: pytorch_lightning.LightningDataModule, multipliers: List[evoapproxlib.ApproximateMultiplier], trainer: pytorch_lightning.Trainer) -> MatchingInfo

   Select matching Approximate Multipliers for all layers in a model

   :param model: Approximate Model with learned layer robustness parameters
   :param datamodule: Data Module to use for sampling runs
   :param library: Approximate Multiplier Library provider
   :param trainer: PyTorch Lightning Trainer instance to use for sampling run
   :param signed: Whether to select signed or unsigned instances from Multiplier library provide.
                  Defaults to True.

   :returns: Dictionary of Assignment results


