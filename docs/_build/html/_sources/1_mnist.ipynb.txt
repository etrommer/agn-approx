{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 1: Approximate MNIST\n",
    "This notebook will walk you through the steps required to train a simple CNN on the MNIST dataset while determining the robustness to additive Gaussian noise.\n",
    "\n",
    "`agnapprox` already comes with predefined implementations for an MNIST dataset loader as well as [LeNet5](https://en.wikipedia.org/wiki/LeNet) which we will use in this tutorial. The next tutorial will show you how to define your own architecture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from agnapprox.nets import LeNet5\n",
    "from agnapprox.datamodules import MNIST"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first set up the datamodule. Downloaded datasets are written to the path pointed to by the environment variable `AGNAPPROX_DATA_DIR` by default. If the variable is not set, the subdirectory `data` is created locally."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "dm = MNIST(batch_size=128, num_workers=4)\n",
    "dm.prepare_data()\n",
    "dm.setup()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we define the model. We can simply instantiate the appropriate `agnapprox` wrapper without anything else."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LeNet5()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Training\n",
    "\n",
    "Every `agnapprox` network has four modes in which the network can be trained:\n",
    "1. **Baseline**: Train an FP32 baseline model without quantization, approximation, AGN, etc.\n",
    "2. **Quantization-aware Training**: Apply quantization during the forward pass. Also known as _quantization-aware training_\n",
    "3. **Gradient Search**: Add Gaussian noise to the output of each target operation. The amount of noise injected in each layer is passed to the optimizer and optimized together with the other network parameters.\n",
    "4. **Approximate Retraining**: Use Lookup tables of approximate multipliers to retrain the network in order to minimize the loss of accuracy when deploying approximate multipliers\n",
    "\n",
    "Normally, you would train a model in every mode in the order given above (but feel free to experiment with other setups!). `agnapprox` network instances provide training functions for each mode with some added functionality. The training functions are wrappers around `pytorch-lightning`'s `Trainer()` API and extra arguments can be passed to the `fit()` method if desired.\n",
    "\n",
    "We will start with a simple FP32 baseline model. The default number of epochs for each stage is defined in the network wrapper file, but it can be overridden by passing `epochs=` to the training function. Here, we will train for 8 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n",
      "\n",
      "  | Name  | Type   | Params\n",
      "---------------------------------\n",
      "0 | model | LeNet5 | 61.9 K\n",
      "---------------------------------\n",
      "61.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "61.9 K    Total params\n",
      "0.248     Total estimated model params size (MB)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a259fc9206c48cdabd25c28aee21343",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sanity Checking: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9fd0087c587e43bd8119a280d0bf8c74",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "acc76c48833e4fde8b6534301875ffd0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "937975590b1b43288b8a1b44d8042da5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7edf046dd8c94df9815846d239ff8622",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5dd7ec7cc15a43d982a37ea4aa605fbb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a789ca6663194f8da9b008dd42c4102d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=5` reached.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "154dbcb97a504c80942eb3f3c5c467f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Testing: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
      "       Test metric             DataLoader 0\n",
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
      "      test_acc_top1         0.9894999861717224\n",
      "        test_loss           0.03623034432530403\n",
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n"
     ]
    }
   ],
   "source": [
    "model.train_baseline(dm, epochs=8, test=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we optimze the model for 8-Bit quantization using the `train_quant` functions. If you are wondering where the training hyperparameters like optimizer, learning rate, learning rate schedule etc. are coming from: They are also pre-defined in the network's definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n",
      "\n",
      "  | Name  | Type   | Params\n",
      "---------------------------------\n",
      "0 | model | LeNet5 | 61.9 K\n",
      "---------------------------------\n",
      "61.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "61.9 K    Total params\n",
      "0.248     Total estimated model params size (MB)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cbdf6ad6afa64702b8b4051933c62afb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sanity Checking: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8f74e654f57e403b9af5f385863f19dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "de20614fe2444954816f4346d782c500",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=1` reached.\n"
     ]
    }
   ],
   "source": [
    "model.train_quant(dm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Robustness Optimization\n",
    "\n",
    "Now comes the exciting part: We train while optimizing the amoung of AGN per layer. By passing `verbose=True` we get a debug output with the intermediate results after every epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n",
      "\n",
      "  | Name  | Type   | Params\n",
      "---------------------------------\n",
      "0 | model | LeNet5 | 61.9 K\n",
      "---------------------------------\n",
      "61.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "61.9 K    Total params\n",
      "0.248     Total estimated model params size (MB)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6d4a77f23c5c42f19ab7e458117137d9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sanity Checking: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e9303f2fc2bb496fa569c8aabc9225a3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f5834429021d4f1c80d97def42220dcd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:agnapprox.nets.approxnet:Epoch: 0\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv1.0 | sigma_l: +0.064\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv2.0 | sigma_l: +0.380\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear1 | sigma_l: +0.098\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear2 | sigma_l: +0.045\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear3 | sigma_l: +0.011\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f8760ab806674e3f88e2a25915ee756a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:agnapprox.nets.approxnet:Epoch: 1\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv1.0 | sigma_l: +0.065\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv2.0 | sigma_l: +0.491\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear1 | sigma_l: +0.103\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear2 | sigma_l: +0.049\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear3 | sigma_l: +0.014\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cec2b7fadeda4ef0aac65e76cfce2ff5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:agnapprox.nets.approxnet:Epoch: 2\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv1.0 | sigma_l: +0.069\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.conv2.0 | sigma_l: +0.499\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear1 | sigma_l: +0.107\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear2 | sigma_l: +0.062\n",
      "INFO:agnapprox.nets.approxnet:Layer: model.linear3 | sigma_l: -0.006\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=3` reached.\n"
     ]
    }
   ],
   "source": [
    "# Set appropriate log level and send to stdout so that logging output shows up in Jupyter\n",
    "import logging\n",
    "logging.basicConfig(level=logging.INFO, stream=sys.stdout)\n",
    "\n",
    "model.train_gradient(dm, lmbd=0.2, initial_noise=0.025)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiplier Assignment\n",
    "Finally, we can use this information to assign matching multipliers to each layer.\n",
    "This is done through a helper function that gets passed a list of approximate multipliers, from which the best-matching one is picked for each layer.\n",
    "\n",
    "Each multiplier in the list should be a dataclass instance that looks like this:\n",
    "```python\n",
    "@dataclass\n",
    "class ApproximateMultiplier\n",
    "    name: str\n",
    "    performance_metric: float\n",
    "    error_map: np.ndarray\n",
    "```\n",
    "For the parameter `performance_metric`, you can choose any property that you want to **minimize** across the your neural network. Normally, this would likely be things like power consumption, area usage, etc.\n",
    "\n",
    "### Error Map Construction\n",
    "The `error_map` is a numpy array of shape 256x256, where each entry corresponds to the difference between the accurate and the approximate result for `int8` operands:\n",
    "```python\n",
    "error_map = np.empty([256,256])\n",
    "\n",
    "for x in range(-128, 128):\n",
    "    for y in range(-128, 128):\n",
    "        error_map[x+128][y+128] = x * y - approx_mult(x, y)\n",
    "```\n",
    "Where `approx_mult` is some approximate multiplication implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mul8s_1KR3, mul8s_1KR6, mul8s_1KR8, mul8s_1KRC, mul8s_1KTY, mul8s_1KV8, mul8s_1KVA, mul8s_1KVB, mul8s_1KVL, mul8s_1KX2, mul8s_1L1G, mul8s_1L2D, mul8s_1L2H\n"
     ]
    }
   ],
   "source": [
    "# Import a few helpers and a provider of approximate multipliers\n",
    "from agnapprox.utils import select_multipliers, deploy_multipliers\n",
    "from evoapproxlib import EvoApproxLib\n",
    "import pytorch_lightning as pl\n",
    "\n",
    "trainer = pl.Trainer()\n",
    "evo = EvoApproxLib()\n",
    "target_multipliers = evo.prepare(signed=True)\n",
    "\n",
    "print(\", \".join([tm.name for tm in target_multipliers]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db648b10202c4bad85ed5e01adea1ca3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:agnapprox.utils.select_multipliers:Layer: model.conv1.0, Best Match: mul8s_1L2H, Performance: 0.301000, Relative Performance: 0.708235\n",
      "INFO:agnapprox.utils.select_multipliers:Layer: model.conv2.0, Best Match: mul8s_1L1G, Performance: 0.126000, Relative Performance: 0.296471\n",
      "INFO:agnapprox.utils.select_multipliers:Layer: model.linear1, Best Match: mul8s_1L2D, Performance: 0.200000, Relative Performance: 0.470588\n",
      "INFO:agnapprox.utils.select_multipliers:Layer: model.linear2, Best Match: mul8s_1L2D, Performance: 0.200000, Relative Performance: 0.470588\n",
      "INFO:agnapprox.utils.select_multipliers:Layer: model.linear3, Best Match: mul8s_1KX2, Performance: 0.391000, Relative Performance: 0.920000\n"
     ]
    }
   ],
   "source": [
    "# Match multipliers to layers\n",
    "res = select_multipliers(\n",
    "    model, dm, target_multipliers, trainer\n",
    ")\n",
    "# Deploy selected multipliers to each layer\n",
    "deploy_multipliers(model, res, evo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we look at some data, we see that the layer with the most multiplications gets assigned the hardware instance with the lowest energy consumption, while the first and last layers remain relatively accurate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 288x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x = np.arange(len(res.layers))\n",
    "multiplier_performance = np.array([l.relative_energy_consumption(res.metric_max) for l in res.layers])\n",
    "opcounts = np.array([l.relative_opcount(res.opcount) for l in res.layers])\n",
    "labels = [l.name for l in res.layers]\n",
    "\n",
    "plt.figure(figsize=(4,6))\n",
    "plt.subplot(211)\n",
    "plt.bar(x, multiplier_performance)\n",
    "plt.xticks(x, labels, rotation=45)\n",
    "plt.ylabel('Relative Energy Consumption')\n",
    "plt.axhline(res.relative_energy_consumption, color='black')\n",
    "\n",
    "plt.subplot(212)\n",
    "plt.bar(x, opcounts, color='orange')\n",
    "plt.xticks(x, labels, rotation=45)\n",
    "plt.ylabel('Relative Opcount')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Approximate Retraining\n",
    "\n",
    "We have selected an approximate multiplier for each layer and deployed them. The last step is to retrain the network while simulating the selected approximate multipliers so that the network learns to compensate for the error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n",
      "HPU available: False, using: 0 HPUs\n",
      "\n",
      "  | Name  | Type   | Params\n",
      "---------------------------------\n",
      "0 | model | LeNet5 | 61.9 K\n",
      "---------------------------------\n",
      "61.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "61.9 K    Total params\n",
      "0.248     Total estimated model params size (MB)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ee83253ccd145aabe7719eda971cd96",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sanity Checking: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f43c7eb452914c9f8d500554ce52de4e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "22af0a8be6904c689e327b9547edd010",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6970077b200548b7a00971b48d88e5c4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c74ae0cc04740f19d412b2626aeb845",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d00471dfd6984c0ba4470f761297f6d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d94abcb8e9140e39945b613de30d62a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Validation: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=5` reached.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e8faa034ed974fbfbfa7012e79372e8c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Testing: 0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
      "       Test metric             DataLoader 0\n",
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n",
      "      test_acc_top1         0.9915000200271606\n",
      "        test_loss          0.031246893107891083\n",
      "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n"
     ]
    }
   ],
   "source": [
    "model.train_approx(dm, test=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.10 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "bcfbc26219664d5aa2275c301081fce34ef3822c3b58c6fc90979e47294771c3"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
